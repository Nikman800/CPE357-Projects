Assignment 3 Decomposition Outline Document

Parse the Makefile to create a dependency tree in a level-order, starting with the Main command. For each level, we will continue building the tree by adding its dependencies. At each node, create linked list of commands to execute to build it from its dependency. Then execute the dependency tree to build the program. 

Datastructure Definitions: Tree, Linked List

Helper Functions: 

//(returns dependencies for target)
-getDependencies(char * target)
	return linked list of Nodes(dependency, type of dependency[rule/file])

//(returns actions for target)
-getActions(char * target)
	return linked list of strings 

//inside main function, reads Makefile, returns zero for success, returns negative int for errors, also returns the root node of dependency tree. Passes in target, default is empty, else runs parseMakefile on first target.
-int parseMakefile(char * filename, char * target, node * Root)  
	return success or failiure

//returns type of dependency (file, rule, both)
-int getDependencyType(char * dependency)
	return dependencyType

//returns true if updated
-int isDependencyUpdated(char * dependency, char * target)
	return (1/0)

//builds dependency tree, zero for success, negative for failiure
-int buildDependencyTree(node * Root)
	return (0/-1)

Pseudocode for Main:
int main(int argc, char * argv)
{
	if target passed
		read target
	if makefile not found
		exit
	if (parseMakefile(target, rootNode) is failiure)
		return error(in makefile)
	
	buildDependencyTree(rootNode)
	
	return success
	
	
}
	
Test Cases:

1. Missing Makefile
2. Valid Makefile with rule, file and both
3. Makefile with specific target
4. Makefile with nonexistent dependency
